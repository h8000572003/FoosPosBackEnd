<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task" 
	xsi:schemaLocation="
	http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd          
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd">


	<!-- 以下為spring batch config -->  
	<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>
	
	<!--   JOB REPOSITORY - USE IN-MEMORY REPOSITORY -->  
	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">  
		<property name="transactionManager" ref="transactionManager" /> 
		<property name="isolationLevelForCreate" value="ISOLATION_DEFAULT"/> 
	</bean> 

	<!--   JOB REPOSITORY - USE DATABASE REPOSITORY -->  	
	<!-- 		
		<bean id="jobRepository" class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
			<property name="dataSource" ref="dataSource" />
			 <property name="transactionManager" ref="transactionManager"/>
			 <property name="databaseType" value="oracle" />
			 <property name="tablePrefix" value="BATCH_"/>
			 <property name="isolationLevelForCreate" value="ISOLATION_DEFAULT"/>
		</bean>
		-->		  
 
	<bean id="jobParametersValidator" class="org.springframework.batch.core.job.DefaultJobParametersValidator"/>  

	<bean id="jobParametersIncrementer" class="org.springframework.batch.core.launch.support.RunIdIncrementer"/>
	
	<bean id="jobExecutor" class="com.food.pos.util.job.JobExecutor">		
		<property name="jobRepository" ref="jobRepository"/>
		<property name="jobParametersIncrementer" ref="jobParametersIncrementer"/> 
		<property name="jobParametersValidator" ref="jobParametersValidator"/>		   
	</bean>		
	<!-- 以上為spring batch config -->
    
	
	<!-- 以下為定時批次作業 -->
	<!-- 使用Spring Task來執行定時作業 -->
<!-- 	<task:scheduled-tasks>    -->
<!-- 		<task:scheduled ref="sampleScheduleJob" method="doWork" cron="0 * * * * ?" />   -->
	
<!-- 	</task:scheduled-tasks>    -->
	
	
	<!-- 以下設定僅適用於Spring 3.1.x + Quartz 2.x -->
	<!--	
		<bean id="jobTask" class="com.nec.svc.nfa.common.job.JobTask">
			<property name="schedullingJob" ref="sampleScheduleJob"/>
			<property name="jobLauncher" ref="jobLauncher"/>
		</bean>

		<bean id="schedulerJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">		
			<property name="targetObject" ref="jobTask"/>             
			<property name="targetMethod" value="executeScheduledJob"/>	

			預設情況下，Quartz Jobs是無狀態的，可能導致jobs之間互相的影響。如果你為相同的JobDetail指定兩個觸發器，很可能當第一個job完成之前，
				   第二個job就開始了。如果JobDetail物件實現了Stateful介面，就不會發生這樣的事情。 第二個job將不會在第一個job完成之前開始。
				   為了使得jobs不併發運行，設置MethodInvokingJobDetailFactoryBean中的concurrent標記為false。 

			<property name="concurrent" value="false" />    	    
		</bean>  

		<bean id="jobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean" >
			<property name="jobDetail" >     
				<ref bean="schedulerJobDetail" />     
			   </property>
			<property name="cronExpression" >
				fired job per 15s       
				<value>0/15 * * * * ?</value>
				fired job per 1hr
				<value>0 0 * * *  ?</value>
			</property>	   	
		</bean>


		<bean id="schedulerFactory" lazy-init="false" autowire="no"	
			class="org.springframework.scheduling.quartz.SchedulerFactoryBean">

			  <property name="startupDelay" value="5000"/>

			<property name="quartzProperties">
				<props>
					<prop key="org.quartz.scheduler.instanceName">QuartzSchedulerFactory</prop>
					<prop key="org.quartz.scheduler.instanceId">AUTO</prop>	            
					<prop key="org.quartz.threadPool.threadCount">60</prop>	            	            
					<prop key="org.quartz.jobStore.class">org.quartz.simpl.RAMJobStore</prop>
				</props>
			</property>
		</bean>-->
	<!-- 以上為定時批次作業 -->
</beans>